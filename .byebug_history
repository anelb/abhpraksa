c
@product.errors.any?
@product.errors.any
@product
c
@product.errors.any?
@product.errors
@product
c
params
c
params[:category_id][0]
params[:category_id]
c
params
c
params
c
params
product_params
c
product_params
c
product_params
c
product_params
@product
c
@product.categories
@product
c
product_params
@product
c
params[:product][:brand_attributes][:id].to_i
params[:product][:brand_attributes][:id].class
params[:product][:brand_attributes][:id]
params[:product][:brand_attributes]
params
product_params
@product
c
params
c
params[:product][:brand_attributes][:id]
params[:product][:brand_attributes]
params[:brand_attributes]
params
params[:brand_attributes]
product_params
@product
c
@product.brand.methods.sort
@product.brand.methods
@product.methods.sort
c
e.message
e.instance_of?
e.inastance_of?
e.methods.sort
e.humanize
e
c
ActiveRecord::RecordNotFound
ActiveRecord::RecordNotFound:
e
Exception.class
Exception
c
@product
Exception
e.to_s
e
c
categories.first.title.mb_chars.downcase.split.first.capitalize.to_s
categories.first.title.mb_chars.downcase.split.first.capitalize
categories.first.title.mb_chars.downcase.split.first.to_s.capitalize
categories.first.title.mb_chars.downcase.split.first.to_s
categories.first.title.mb_chars.downcase.split.first
categories.first.title.mb_chars.downcase.split
c
categories.first.title.mb_chars.downcase.split
c
categories.first.title.mb_chars.downcase.split
c
categories.first.title.mb_chars.downcase.split
c
categories.first.title.mb_chars.downcase.split
c
categories.first.title.mb_chars.downcase.split
c
product
c
product_params
product
c
product_params
c
params
product_params
c
product_params
c
product_params
@product
c
product_params
@product
c
product_params
@product
c
@product.product_variants
@product
c
create
@product
c
@product
create
c
@brand
self
@categories
c
@product
@categories
c
product_params
@product
c
product_params
@product
c
params[:product]
product_params
c
product_params
c
product_params
c
product_params
c
product_params
c
@product
c
product_params
@product
c
product_params
c
@product
c
@product
c
product_params
c
params[:product]
params[1]
params.length
params.class
params
c
params[:product][:brands][:brand_id]
product_params
params[:product][:brands][:brand_id]
params[:product][:brands]
params[:product]
c
@product
c
@params
c
product_params
@product
c
params[:product][:brands][:brand_id].class
params[:product][:brands][:brand_id]
params[:product][:brands]['brand_id']
params[:product][:brands]
params[:brands]
brands
@product
c
product_params
@product
c
product_params
@product
c
product_params
@product
c
categories.first.title.mb_chars.downcase.split[0].to_s.capitalize
categories.first.title.mb_chars.downcase.split[0].to_s
categories.first.title.mb_chars.downcase.split[0].capitalize
categories.first.title.mb_chars.downcase.split[0]
categories.first.title.mb_chars.downcase.split.length
categories.first.title.mb_chars.downcase.split
self
c
@products
c
@products
c
@products
c
@products
c
@products
c
@products.length
@products
c
@products
c
self.all.collect.count
self.all.collect
c
product.product_variants.empty?
product.product_variants
product
self
c
@products
c
cart_items
c
slice.length
slice
@sale_products.each_slice(4)
c
@sale_products
c
params
c
@product
c
@product
c
@product.categories
@product
params
params[:category_id]
c
ProductVariant.check_quantity(product_variant).count
product_variant
c
product_variant
product_variant_qunatity
product_variant_quantity
c
current_item
c
ProductVariant.where(@cart_item.product_variant_id)
